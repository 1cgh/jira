
#Использовать 1connector
#Использовать "../internal"

#Область ОписаниеПеременных

// Структура с ключом сессии, полученным при аутентификации в Jira.
Перем КлючСессии;
// Адрес системы Jira, доступ к ресурсам которой осуществляется.
Перем АдресСистемы;
// Структура с данными для аутентификации в Jira со свойствами:
//   * Логин - Строка - логин пользователя в Jira.
//   * Пароль - Строка - пароль пользователя в Jira.
Перем Аутентификация;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Установка параметров аутентификации для подключения к Jira
//
// Параметры:
//   пАутентификация - Структура - параметры для аутентификации в Jira.
//
// Возвращаемое значение:
//   Jira - возвращает текущий объект с установленными параметрами аутентификации.
//
Функция Аутентификация(пАутентификация) Экспорт

	Аутентификация = пАутентификация;
	КлючСессии = Неопределено;
	Возврат ЭтотОбъект;

КонецФункции

// Установка адреса Jira-сервера.
//
// Параметры:
//   пАдресСистемы - Строка - адрес системы Jira
//
// Возвращаемое значение:
//   Jira - текущий объект с установленным адресом системы.
//
Функция АдресСистемы(пАдресСистемы) Экспорт

	АдресСистемы = пАдресСистемы;
	КлючСессии = Неопределено;
	Возврат ЭтотОбъект;

КонецФункции

// Поиск задач с помощью JQL-запроса.
//
// Параметры:
//   СтрокаПоиска - Строка - JQL-запрос.
//   НачинаяС - Число, Неопределено - индекс, начиная с которого выдаются результаты. По умолчанию 0.
//   МаксКоличествоРезультатов - Число, Неопределено - макс. количество задач в результате поиска. По умолчанию 50.
//   ПроверятьЗапрос - Булево, Неопределено - флаг валидации запроса в Jira.
//   Поля - Строка, Массив, Неопределено - поля задач, возвращаемых в результате запроса.
//     Допускается передача в виде массива или строки с разделителями-запятыми. По умолчанию *navigable.
//   РасширитьПо - Строка - список данных, разделенными запятыми, которыми надо расширить результат поиска.
//
//  Возвращаемое значение:
//   Массив - массив объектов Задача, полученных в результате поиска.
//
Функция Поиск(СтрокаПоиска, НачинаяС = Неопределено, МаксКоличествоРезультатов = Неопределено,
	ПроверятьЗапрос = Неопределено,	Поля = Неопределено, РасширитьПо = Неопределено) Экспорт

	// Если поля переданы строкой, то преобразуем в массив полей.
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		МассивПолей = СтрРазделить(Поля, ",", Ложь);
	Иначе
		МассивПолей = Поля;
	КонецЕсли;

	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("jql", СтрокаПоиска);
	ВставитьЗначениеВСтруктуруЕслиОпределено(СтруктураЗапроса, НачинаяС, "startAt");
	ВставитьЗначениеВСтруктуруЕслиОпределено(СтруктураЗапроса, МаксКоличествоРезультатов, "maxResults");
	ВставитьЗначениеВСтруктуруЕслиОпределено(СтруктураЗапроса, ПроверятьЗапрос, "validateQuery");
	ВставитьЗначениеВСтруктуруЕслиОпределено(СтруктураЗапроса, МассивПолей, "fields");
	ВставитьЗначениеВСтруктуруЕслиОпределено(СтруктураЗапроса, РасширитьПо, "expand");

	Данные = СлужебныеМетоды.ЗначениеВJSONСтроку(СтруктураЗапроса);

	ДополнительныеПараметры = Новый Структура("Данные", Данные);

	АдресРесурса = "/rest/api/latest/search";

	РезультатЗапроса = РезультатЗапроса(АдресРесурса, "POST", ДополнительныеПараметры);

	РезультатПоиска = РезультатЗапроса.JSON()["issues"];
	Результат = Новый Массив;
	Для каждого ОписаниеЗадачи Из РезультатПоиска Цикл
		Результат.Добавить(ПолучитьЗадачу(ОписаниеЗадачи["key"]));
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Создание новой задачи в Jira
//
// Параметры:
//   ДанныеЗадачи - Структура, Соответствие - подготовленные данные новой задачи.
//   ОбновлятьИсторию - Булево, Неопределено - флаг для обновления истории проекта в Jira
//     после создания задачи. Если не передан, то Ложь.
//
//  Возвращаемое значение:
//   Задача - объект созданной задачи.
//
Функция СоздатьЗадачу(ДанныеЗадачи, ОбновлятьИсторию = Неопределено) Экспорт

	ПараметрыЗапроса = Новый Структура;
	ВставитьЗначениеВСтруктуруЕслиОпределено(ПараметрыЗапроса, ОбновлятьИсторию, "updateHistory");

	Данные = СлужебныеМетоды.ЗначениеВJSONСтроку(ДанныеЗадачи);

	ДополнительныеПараметры = Новый Структура("ПараметрыЗапроса, Данные", ПараметрыЗапроса, Данные);

	АдресРесурса = "/rest/api/latest/issue";

	РезультатЗапроса = РезультатЗапроса(АдресРесурса, "POST", ДополнительныеПараметры);

	Если РезультатЗапроса.КодСостояния = 201 Тогда
		Возврат ПолучитьЗадачу(РезультатЗапроса.JSON()["key"]);
	ИначеЕсли РезультатЗапроса.КодСостояния = 400 Тогда
		ТекстОтвета = РезультатЗапроса.Текст();
		ТекстИсключения = СтрШаблон("Не удалось создать задачу по причине:
			|%1", ТекстОтвета);
		ВызватьИсключение ТекстИсключения;
	Иначе
		ТекстИсключения = "Не удалось создать задачу";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

КонецФункции

// Получение задачи по идентификатору или ключу.
//
// Параметры:
//   ИдентификаторКлючЗадачи - Строка - идентификатор или ключ задачи.
//   Поля - Строка, Неопределено - список полей задачи через запятую. По умолчанию - все.
//   РасширитьПо - Строка, Неопределено - список данных через запятую, которыми необходимо расширить результат запроса.
//   Свойства - Строка, Неопределено - список свойств задачи через запятую.
//   ОбновлятьИсторию - Булево, Неопределено - флаг для обновления истории проекта после запроса.
//     По умолчанию - Ложь.
//
//  Возвращаемое значение:
//   Задача - объект полученной задачи.
//
Функция ПолучитьЗадачу(ИдентификаторКлючЗадачи, Поля = Неопределено, РасширитьПо = Неопределено,
	Свойства = Неопределено, ОбновлятьИсторию = Неопределено) Экспорт

	ПараметрыЗапроса = Новый Структура;
	ВставитьЗначениеВСтруктуруЕслиОпределено(ПараметрыЗапроса, Поля, "fields");
	ВставитьЗначениеВСтруктуруЕслиОпределено(ПараметрыЗапроса, РасширитьПо, "expand");
	ВставитьЗначениеВСтруктуруЕслиОпределено(ПараметрыЗапроса, Свойства, "properties");
	ВставитьЗначениеВСтруктуруЕслиОпределено(ПараметрыЗапроса, ОбновлятьИсторию, "updateHistory");

	ДополнительныеПараметры = Новый Структура("ПараметрыЗапроса", ПараметрыЗапроса);

	АдресРесурса = СтрШаблон("/rest/api/latest/issue/%1", ИдентификаторКлючЗадачи);

	РезультатЗапроса = РезультатЗапроса(АдресРесурса, "GET", ДополнительныеПараметры);

	ДанныеЗадачи = РезультатЗапроса.JSON();
	Задача = Новый Задача(ЭтотОбъект, ДанныеЗадачи);
	Возврат Задача;

КонецФункции

// Добавление вложения к задаче.
//
// Параметры:
//   ИдентификаторКлючЗадачи - Строка - ключ или идентификатор задачи.
//   ИмяФайла - Строка - имя файла вложения.
//   ДвоичныеДанныеФайла - ДвоичныеДанные - двоичные данные вложения.
//   Тип - Строка - MIME-тип файла.
//
//  Возвращаемое значение:
//   Задача - объект задачи, в которую добавлено вложение.
//
Функция ДобавитьВложение(ИдентификаторКлючЗадачи, ИмяФайла, ДвоичныеДанныеФайла, Тип) Экспорт

	Файлы = Новый Структура;
	Файлы.Вставить("Имя", "file"); // Требование API Jira.
	Файлы.Вставить("ИмяФайла", ИмяФайла);
	Файлы.Вставить("Данные", ДвоичныеДанныеФайла);
	Файлы.Вставить("Тип", Тип);

	// Для данного ресурса требуется добавить отдельный заголовок.
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Atlassian-Token", "no-check");

	ДополнительныеПараметры = Новый Структура("Файлы, Заголовки", Файлы, Заголовки);

	АдресРесурса = СтрШаблон("/rest/api/latest/issue/%1/attachments", ИдентификаторКлючЗадачи);
	
	РезультатЗапроса = РезультатЗапроса(АдресРесурса, "POST", ДополнительныеПараметры);

	Задача = ПолучитьЗадачу(ИдентификаторКлючЗадачи);
	Возврат Задача;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта(пАдресСистемы = Неопределено,
	пАутентификация = Неопределено)

	Если пАдресСистемы <> Неопределено Тогда
		АдресСистемы = пАдресСистемы;
	КонецЕсли;
	Если пАутентификация <> Неопределено Тогда
		Аутентификация = пАутентификация;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатЗапроса(АдресРесурса, HTTPМетод, ДополнительныеПараметры = Неопределено)

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если КлючСессии = Неопределено Тогда
		КлючСессии = КлючСессии();
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("Заголовки") Тогда
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	КонецЕсли;

	Cookies = Новый Массив;
	Cookies.Добавить(КлючСессии);
	ДополнительныеПараметры.Вставить("Cookies", Cookies);

	URL = АдресСистемы + АдресРесурса;

	Возврат КоннекторHTTP.ВызватьМетод(HTTPМетод, URL, ДополнительныеПараметры);

КонецФункции

Функция КлючСессии()

	ДанныеАутентификации = ДанныеАутентификации();
	ИмяСессии = ДанныеАутентификации["session"]["name"];
	ЗначениеСессии = ДанныеАутентификации["session"]["value"];
	
	// Заполняем структуру с ключом сессии для дальнейшей передачи в Cookies.
	Результат = Новый Структура("Наименование, Значение");
	Результат.Наименование = ИмяСессии;
	Результат.Значение = ЗначениеСессии;
	Возврат  Результат;

КонецФункции

Процедура ВставитьЗначениеВСтруктуруЕслиОпределено(Структура, Значение, Ключ)

	Если Значение <> Неопределено Тогда
		Структура.Вставить(Ключ, Значение);
	КонецЕсли;

КонецПроцедуры

Функция ДанныеАутентификации()

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("username", Аутентификация.Логин);
	ПараметрыЗапроса.Вставить("password", Аутентификация.Пароль);
	АдресЗапроса = АдресСистемы + "/rest/auth/1/session";
	РезультатЗапроса = КоннекторHTTP.Post(АдресЗапроса, , ПараметрыЗапроса);
	Возврат РезультатЗапроса.JSON();

КонецФункции

#КонецОбласти
